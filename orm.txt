# ORMs in Django
    => ORM stands for Object Relational Mapping
    => It is the way to query the database using python code rather than raw sql queries.

# Simple CRUD in a table using ORM
    Create
    => Student.objects.create(name="Jane", age=21, department="CS")

    Read
    => Student.objects.all() => It gives all the objects in queryset
    => Student.objects.filter(name="Jon")  => [obj1, obj2, obj3]
    => Student.objects.get(id=1)  => obj1

    .get()
     1. If there is no data then it returns ObjectDoesNotExist exception
     2. If there are more than one data it returns MultipleObjectsReturned exception
     3. Above two conditions imply that we should always use get with unique fields
        (id, username, email, phone)
     4. Always use .get() in try_except block

        try:
            s = Student.objects.get(id=20)
        except:
            print("Invalid ID")

    .filter()
    1. filter() method returns queryset.
    2. Queryset is a list-like object with objects as its elements.
        [obj1, obj2, obj3]
    3. But queryset differs from list in many ways:
            => List is mutable but queryset is immutable
            => List supports negative indexing but queryset does not support negative indexing

    4. If we query the table using .filter() method then it returns either the queryset with one or more data,
    or an empty queryset but it doesn't raise exception.

    Update
    Student.objects.filter(id=1).update(name="Jon")
    => update() method should always be used in queryset
    => The update is made in all the data of the queryset

    Delete
    Student.objects.filter(id=1).delete()
    Student.objects.get(id=1).delete()

    => delete() method can be used in both queryset and object
    => If used in queryset, it deletes all the objects of that queryset
    => i.e. Student.objects.all().delete() deletes all the rows from the Student table


# Accessing the data from results of ORM
s = Student.objects.get(id=1)
s.name, s.department, s.age, s.id

students = Student.objects.filter(department="Electrical")
for student in students:
    print(student.name, student.age, student.department)
